{"ast":null,"code":"import { initializeApp } from \"firebase/app\";\nimport { getFirestore, collection, doc, getDoc, setDoc, onSnapshot, writeBatch, getDocs } from \"firebase/firestore\";\nimport { getAuth, GoogleAuthProvider, signInWithPopup, onAuthStateChanged, createUserWithEmailAndPassword, signInWithEmailAndPassword } from \"firebase/auth\";\nconst firebaseConfig = {\n  apiKey: \"AIzaSyAJKILP5CeQIYJ401_o-GT0snuWDy8kkKA\",\n  authDomain: \"ecommerce-app-db-afcd3.firebaseapp.com\",\n  projectId: \"ecommerce-app-db-afcd3\",\n  storageBucket: \"ecommerce-app-db-afcd3.appspot.com\",\n  messagingSenderId: \"385228327556\",\n  appId: \"1:385228327556:web:80c1c9673644e6b6ebd0d1\"\n}; //init Firebase\n\nconst app = initializeApp(firebaseConfig); //init services\n\nconst authInstance = getAuth(app);\nconst firestoreDatabase = getFirestore();\nconst batch = writeBatch(firestoreDatabase); //Google Sign-in\n\nconst googleProvider = new GoogleAuthProvider(); //adding in firestore database based upon the user's authentication info\n\nconst createUserProfileDocument = async (userAuth, additionalData) => {\n  const userRef = doc(firestoreDatabase, `users/${userAuth.uid}`);\n  let snapshot = await getDoc(userRef);\n\n  if (!snapshot.exists()) {\n    const {\n      displayName,\n      email\n    } = userAuth;\n    const createdAt = new Date();\n\n    try {\n      await setDoc(userRef, {\n        displayName,\n        email,\n        createdAt,\n        ...additionalData\n      });\n    } catch (error) {\n      console.log(\"Error\", error);\n    }\n  }\n\n  return userRef;\n};\n\nconst addCollectionAndDocuments = async (collectionKey, documentsToAdd) => {\n  const colRef = collection(firestoreDatabase, collectionKey);\n  documentsToAdd.forEach(document => {\n    const newDocRef = doc(colRef);\n    batch.set(newDocRef, document);\n  });\n  return await batch.commit();\n};\n\nconst convertCollectionsSnapshotToMap = collectionSnapshot => {\n  const transformedCollection = collectionSnapshot.docs.map(collection => {\n    const {\n      items,\n      title\n    } = collection.data();\n    return {\n      id: collection.id,\n      route: collection.title,\n      items,\n      title\n    };\n  });\n  return transformedCollection.reduce((accumulator, collection) => {\n    accumulator[collection.title.toLowerCase()] = collection;\n    return accumulator;\n  }, {});\n};\n\nfunction getCurrentUser() {\n  return new Promise((resolve, reject) => {\n    const unsubscribe = onAuthStateChanged(authInstance, userAuth => {\n      unsubscribe();\n      resolve(userAuth);\n    }, reject);\n  });\n}\n\nexport { onAuthStateChanged, authInstance, firestoreDatabase, collection, createUserProfileDocument, createUserWithEmailAndPassword, signInWithEmailAndPassword, doc, getDoc, onSnapshot, addCollectionAndDocuments, getDocs, convertCollectionsSnapshotToMap, googleProvider, signInWithPopup, getCurrentUser };","map":{"version":3,"sources":["C:/Users/Acer/Desktop/Projects/React/ecommerce-app/src/firebase/firebase.utils.js"],"names":["initializeApp","getFirestore","collection","doc","getDoc","setDoc","onSnapshot","writeBatch","getDocs","getAuth","GoogleAuthProvider","signInWithPopup","onAuthStateChanged","createUserWithEmailAndPassword","signInWithEmailAndPassword","firebaseConfig","apiKey","authDomain","projectId","storageBucket","messagingSenderId","appId","app","authInstance","firestoreDatabase","batch","googleProvider","createUserProfileDocument","userAuth","additionalData","userRef","uid","snapshot","exists","displayName","email","createdAt","Date","error","console","log","addCollectionAndDocuments","collectionKey","documentsToAdd","colRef","forEach","document","newDocRef","set","commit","convertCollectionsSnapshotToMap","collectionSnapshot","transformedCollection","docs","map","items","title","data","id","route","reduce","accumulator","toLowerCase","getCurrentUser","Promise","resolve","reject","unsubscribe"],"mappings":"AAAA,SAASA,aAAT,QAA8B,cAA9B;AACA,SACEC,YADF,EAEEC,UAFF,EAGEC,GAHF,EAIEC,MAJF,EAKEC,MALF,EAMEC,UANF,EAOEC,UAPF,EAQEC,OARF,QASO,oBATP;AAUA,SACEC,OADF,EAEEC,kBAFF,EAGEC,eAHF,EAIEC,kBAJF,EAKEC,8BALF,EAMEC,0BANF,QAOO,eAPP;AASA,MAAMC,cAAc,GAAG;AACrBC,EAAAA,MAAM,EAAE,yCADa;AAErBC,EAAAA,UAAU,EAAE,wCAFS;AAGrBC,EAAAA,SAAS,EAAE,wBAHU;AAIrBC,EAAAA,aAAa,EAAE,oCAJM;AAKrBC,EAAAA,iBAAiB,EAAE,cALE;AAMrBC,EAAAA,KAAK,EAAE;AANc,CAAvB,C,CASA;;AACA,MAAMC,GAAG,GAAGtB,aAAa,CAACe,cAAD,CAAzB,C,CAEA;;AACA,MAAMQ,YAAY,GAAGd,OAAO,CAACa,GAAD,CAA5B;AACA,MAAME,iBAAiB,GAAGvB,YAAY,EAAtC;AACA,MAAMwB,KAAK,GAAGlB,UAAU,CAACiB,iBAAD,CAAxB,C,CAEA;;AACA,MAAME,cAAc,GAAG,IAAIhB,kBAAJ,EAAvB,C,CAEA;;AACA,MAAMiB,yBAAyB,GAAG,OAAOC,QAAP,EAAiBC,cAAjB,KAAoC;AACpE,QAAMC,OAAO,GAAG3B,GAAG,CAACqB,iBAAD,EAAqB,SAAQI,QAAQ,CAACG,GAAI,EAA1C,CAAnB;AACA,MAAIC,QAAQ,GAAG,MAAM5B,MAAM,CAAC0B,OAAD,CAA3B;;AAEA,MAAI,CAACE,QAAQ,CAACC,MAAT,EAAL,EAAwB;AACtB,UAAM;AAAEC,MAAAA,WAAF;AAAeC,MAAAA;AAAf,QAAyBP,QAA/B;AACA,UAAMQ,SAAS,GAAG,IAAIC,IAAJ,EAAlB;;AAEA,QAAI;AACF,YAAMhC,MAAM,CAACyB,OAAD,EAAU;AACpBI,QAAAA,WADoB;AAEpBC,QAAAA,KAFoB;AAGpBC,QAAAA,SAHoB;AAIpB,WAAGP;AAJiB,OAAV,CAAZ;AAMD,KAPD,CAOE,OAAOS,KAAP,EAAc;AACdC,MAAAA,OAAO,CAACC,GAAR,CAAY,OAAZ,EAAqBF,KAArB;AACD;AACF;;AAED,SAAOR,OAAP;AACD,CArBD;;AAuBA,MAAMW,yBAAyB,GAAG,OAAOC,aAAP,EAAsBC,cAAtB,KAAyC;AACzE,QAAMC,MAAM,GAAG1C,UAAU,CAACsB,iBAAD,EAAoBkB,aAApB,CAAzB;AAEAC,EAAAA,cAAc,CAACE,OAAf,CAAwBC,QAAD,IAAc;AACnC,UAAMC,SAAS,GAAG5C,GAAG,CAACyC,MAAD,CAArB;AACAnB,IAAAA,KAAK,CAACuB,GAAN,CAAUD,SAAV,EAAqBD,QAArB;AACD,GAHD;AAKA,SAAO,MAAMrB,KAAK,CAACwB,MAAN,EAAb;AACD,CATD;;AAWA,MAAMC,+BAA+B,GAAIC,kBAAD,IAAwB;AAC9D,QAAMC,qBAAqB,GAAGD,kBAAkB,CAACE,IAAnB,CAAwBC,GAAxB,CAA6BpD,UAAD,IAAgB;AACxE,UAAM;AAAEqD,MAAAA,KAAF;AAASC,MAAAA;AAAT,QAAmBtD,UAAU,CAACuD,IAAX,EAAzB;AAEA,WAAO;AACLC,MAAAA,EAAE,EAAExD,UAAU,CAACwD,EADV;AAELC,MAAAA,KAAK,EAAEzD,UAAU,CAACsD,KAFb;AAGLD,MAAAA,KAHK;AAILC,MAAAA;AAJK,KAAP;AAMD,GAT6B,CAA9B;AAWA,SAAOJ,qBAAqB,CAACQ,MAAtB,CAA6B,CAACC,WAAD,EAAc3D,UAAd,KAA6B;AAC/D2D,IAAAA,WAAW,CAAC3D,UAAU,CAACsD,KAAX,CAAiBM,WAAjB,EAAD,CAAX,GAA8C5D,UAA9C;AACA,WAAO2D,WAAP;AACD,GAHM,EAGJ,EAHI,CAAP;AAID,CAhBD;;AAkBA,SAASE,cAAT,GAA0B;AACxB,SAAO,IAAIC,OAAJ,CAAY,CAACC,OAAD,EAAUC,MAAV,KAAqB;AACtC,UAAMC,WAAW,GAAGvD,kBAAkB,CACpCW,YADoC,EAEnCK,QAAD,IAAc;AACZuC,MAAAA,WAAW;AACXF,MAAAA,OAAO,CAACrC,QAAD,CAAP;AACD,KALmC,EAMpCsC,MANoC,CAAtC;AAQD,GATM,CAAP;AAUD;;AAED,SACEtD,kBADF,EAEEW,YAFF,EAGEC,iBAHF,EAIEtB,UAJF,EAKEyB,yBALF,EAMEd,8BANF,EAOEC,0BAPF,EAQEX,GARF,EASEC,MATF,EAUEE,UAVF,EAWEmC,yBAXF,EAYEjC,OAZF,EAaE0C,+BAbF,EAcExB,cAdF,EAeEf,eAfF,EAgBEoD,cAhBF","sourcesContent":["import { initializeApp } from \"firebase/app\";\r\nimport {\r\n  getFirestore,\r\n  collection,\r\n  doc,\r\n  getDoc,\r\n  setDoc,\r\n  onSnapshot,\r\n  writeBatch,\r\n  getDocs,\r\n} from \"firebase/firestore\";\r\nimport {\r\n  getAuth,\r\n  GoogleAuthProvider,\r\n  signInWithPopup,\r\n  onAuthStateChanged,\r\n  createUserWithEmailAndPassword,\r\n  signInWithEmailAndPassword,\r\n} from \"firebase/auth\";\r\n\r\nconst firebaseConfig = {\r\n  apiKey: \"AIzaSyAJKILP5CeQIYJ401_o-GT0snuWDy8kkKA\",\r\n  authDomain: \"ecommerce-app-db-afcd3.firebaseapp.com\",\r\n  projectId: \"ecommerce-app-db-afcd3\",\r\n  storageBucket: \"ecommerce-app-db-afcd3.appspot.com\",\r\n  messagingSenderId: \"385228327556\",\r\n  appId: \"1:385228327556:web:80c1c9673644e6b6ebd0d1\",\r\n};\r\n\r\n//init Firebase\r\nconst app = initializeApp(firebaseConfig);\r\n\r\n//init services\r\nconst authInstance = getAuth(app);\r\nconst firestoreDatabase = getFirestore();\r\nconst batch = writeBatch(firestoreDatabase);\r\n\r\n//Google Sign-in\r\nconst googleProvider = new GoogleAuthProvider();\r\n\r\n//adding in firestore database based upon the user's authentication info\r\nconst createUserProfileDocument = async (userAuth, additionalData) => {\r\n  const userRef = doc(firestoreDatabase, `users/${userAuth.uid}`);\r\n  let snapshot = await getDoc(userRef);\r\n\r\n  if (!snapshot.exists()) {\r\n    const { displayName, email } = userAuth;\r\n    const createdAt = new Date();\r\n\r\n    try {\r\n      await setDoc(userRef, {\r\n        displayName,\r\n        email,\r\n        createdAt,\r\n        ...additionalData,\r\n      });\r\n    } catch (error) {\r\n      console.log(\"Error\", error);\r\n    }\r\n  }\r\n\r\n  return userRef;\r\n};\r\n\r\nconst addCollectionAndDocuments = async (collectionKey, documentsToAdd) => {\r\n  const colRef = collection(firestoreDatabase, collectionKey);\r\n\r\n  documentsToAdd.forEach((document) => {\r\n    const newDocRef = doc(colRef);\r\n    batch.set(newDocRef, document);\r\n  });\r\n\r\n  return await batch.commit();\r\n};\r\n\r\nconst convertCollectionsSnapshotToMap = (collectionSnapshot) => {\r\n  const transformedCollection = collectionSnapshot.docs.map((collection) => {\r\n    const { items, title } = collection.data();\r\n\r\n    return {\r\n      id: collection.id,\r\n      route: collection.title,\r\n      items,\r\n      title,\r\n    };\r\n  });\r\n\r\n  return transformedCollection.reduce((accumulator, collection) => {\r\n    accumulator[collection.title.toLowerCase()] = collection;\r\n    return accumulator;\r\n  }, {});\r\n};\r\n\r\nfunction getCurrentUser() {\r\n  return new Promise((resolve, reject) => {\r\n    const unsubscribe = onAuthStateChanged(\r\n      authInstance,\r\n      (userAuth) => {\r\n        unsubscribe();\r\n        resolve(userAuth);\r\n      },\r\n      reject\r\n    );\r\n  });\r\n}\r\n\r\nexport {\r\n  onAuthStateChanged,\r\n  authInstance,\r\n  firestoreDatabase,\r\n  collection,\r\n  createUserProfileDocument,\r\n  createUserWithEmailAndPassword,\r\n  signInWithEmailAndPassword,\r\n  doc,\r\n  getDoc,\r\n  onSnapshot,\r\n  addCollectionAndDocuments,\r\n  getDocs,\r\n  convertCollectionsSnapshotToMap,\r\n  googleProvider,\r\n  signInWithPopup,\r\n  getCurrentUser,\r\n};\r\n"]},"metadata":{},"sourceType":"module"}