{"ast":null,"code":"import { takeLatest, call, put, all } from \"redux-saga/effects\";\nimport { firestoreDatabase, collection, getDocs, convertCollectionsSnapshotToMap } from \"../../firebase/firebase.utils\";\nimport ShopActionTypes from \"./shop-types\";\nimport { fetchCollectionsSuccess, fetchCollectionsFailure } from \"./shop-actions\";\n\nfunction* AsyncFetchCollections() {\n  try {\n    const colRef = yield collection(firestoreDatabase, \"collections\");\n    const collectionsSnapshot = yield getDocs(colRef);\n    const collectionsMap = yield call(convertCollectionsSnapshotToMap, collectionsSnapshot);\n    yield put(fetchCollectionsSuccess(collectionsMap));\n  } catch (error) {\n    yield put(fetchCollectionsFailure(error.message));\n  }\n} // Starts AsyncFetchCollections on each dispatched `FETCH_COLLECTIONS_START` action.\n\n\n_c = AsyncFetchCollections;\n\nfunction* fetchCollectionsStart() {\n  yield takeLatest(ShopActionTypes.FETCH_COLLECTIONS_START, AsyncFetchCollections);\n}\n\nfunction* shopSagas() {\n  yield all([call(fetchCollectionsStart)]);\n}\n\nexport default shopSagas;\n\nvar _c;\n\n$RefreshReg$(_c, \"AsyncFetchCollections\");","map":{"version":3,"sources":["C:/Users/Acer/Desktop/Projects/React/ecommerce-app/src/redux/shop/shop-saga.js"],"names":["takeLatest","call","put","all","firestoreDatabase","collection","getDocs","convertCollectionsSnapshotToMap","ShopActionTypes","fetchCollectionsSuccess","fetchCollectionsFailure","AsyncFetchCollections","colRef","collectionsSnapshot","collectionsMap","error","message","fetchCollectionsStart","FETCH_COLLECTIONS_START","shopSagas"],"mappings":"AAAA,SAASA,UAAT,EAAqBC,IAArB,EAA2BC,GAA3B,EAAgCC,GAAhC,QAA2C,oBAA3C;AAEA,SACEC,iBADF,EAEEC,UAFF,EAGEC,OAHF,EAIEC,+BAJF,QAKO,+BALP;AAOA,OAAOC,eAAP,MAA4B,cAA5B;AACA,SACEC,uBADF,EAEEC,uBAFF,QAGO,gBAHP;;AAKA,UAAUC,qBAAV,GAAkC;AAChC,MAAI;AACF,UAAMC,MAAM,GAAG,MAAMP,UAAU,CAACD,iBAAD,EAAoB,aAApB,CAA/B;AACA,UAAMS,mBAAmB,GAAG,MAAMP,OAAO,CAACM,MAAD,CAAzC;AACA,UAAME,cAAc,GAAG,MAAMb,IAAI,CAC/BM,+BAD+B,EAE/BM,mBAF+B,CAAjC;AAIA,UAAMX,GAAG,CAACO,uBAAuB,CAACK,cAAD,CAAxB,CAAT;AACD,GARD,CAQE,OAAOC,KAAP,EAAc;AACd,UAAMb,GAAG,CAACQ,uBAAuB,CAACK,KAAK,CAACC,OAAP,CAAxB,CAAT;AACD;AACF,C,CAED;;;KAdUL,qB;;AAgBV,UAAUM,qBAAV,GAAkC;AAChC,QAAMjB,UAAU,CACdQ,eAAe,CAACU,uBADF,EAEdP,qBAFc,CAAhB;AAID;;AAED,UAAUQ,SAAV,GAAsB;AACpB,QAAMhB,GAAG,CAAC,CAACF,IAAI,CAACgB,qBAAD,CAAL,CAAD,CAAT;AACD;;AAED,eAAeE,SAAf","sourcesContent":["import { takeLatest, call, put, all } from \"redux-saga/effects\";\r\n\r\nimport {\r\n  firestoreDatabase,\r\n  collection,\r\n  getDocs,\r\n  convertCollectionsSnapshotToMap,\r\n} from \"../../firebase/firebase.utils\";\r\n\r\nimport ShopActionTypes from \"./shop-types\";\r\nimport {\r\n  fetchCollectionsSuccess,\r\n  fetchCollectionsFailure,\r\n} from \"./shop-actions\";\r\n\r\nfunction* AsyncFetchCollections() {\r\n  try {\r\n    const colRef = yield collection(firestoreDatabase, \"collections\");\r\n    const collectionsSnapshot = yield getDocs(colRef);\r\n    const collectionsMap = yield call(\r\n      convertCollectionsSnapshotToMap,\r\n      collectionsSnapshot\r\n    );\r\n    yield put(fetchCollectionsSuccess(collectionsMap));\r\n  } catch (error) {\r\n    yield put(fetchCollectionsFailure(error.message));\r\n  }\r\n}\r\n\r\n// Starts AsyncFetchCollections on each dispatched `FETCH_COLLECTIONS_START` action.\r\n\r\nfunction* fetchCollectionsStart() {\r\n  yield takeLatest(\r\n    ShopActionTypes.FETCH_COLLECTIONS_START,\r\n    AsyncFetchCollections\r\n  );\r\n}\r\n\r\nfunction* shopSagas() {\r\n  yield all([call(fetchCollectionsStart)]);\r\n}\r\n\r\nexport default shopSagas;\r\n"]},"metadata":{},"sourceType":"module"}